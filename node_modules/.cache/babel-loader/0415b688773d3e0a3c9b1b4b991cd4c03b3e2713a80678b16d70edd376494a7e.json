{"ast":null,"code":"var _jsxFileName = \"C:\\\\Denmark studies\\\\4th semester\\\\WEB\\\\assignment3\\\\pokedex\\\\src\\\\pages\\\\About.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const About = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"about-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"This is a web assignment for IT-WEB2Y-S23\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"It was made by these students:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Vladislav Sarafutdinov - 315224\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 11,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Syamend Husin Mamo - 317546\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 12,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"This website uses these elements:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"JavaScript\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"React\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"React-Modal\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"React-Routing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"PokeApi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 22,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"A drop of love\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Here's some text from PokeApi website:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"What is this? This website provides a RESTful API interface to highly detailed objects built from thousands of lines of data related to Pok\\xE9mon. We specifically cover the video game franchise. Using this website, you can consume information on Pok\\xE9mon, their moves, abilities, types, egg groups and much, much more. What is an API? An API (Application Programming Interface) is a contract that allow developers to interact with an application through a set of interfaces. In this case, the application is a database of thousands of Pok\\xE9mon-related objects, and the interfaces are URL links. A RESTful API is an API that conforms to a set of loose conventions based on HTTP verbs, errors, and hyperlinks. Aren't there 101 other Pok\\xE9mon websites already? Yes and that's exactly the problem! 101 instances of the same website means 101 instances of the same data. We aim to provide a single source of data that any number of other websites can consume and use. Often, and especially when new Pok\\xE9mon games or updates are released, those 101+ websites take weeks to update as people have to enter the same information in all those different places. This solves that problem. If all those sites consumed their data from here, they would have the exact same information that is updated at exactly the same time, with no errors between each website. The overall benefit is a better collaboration and consistency across all the different Pok\\xE9mon websites and applications. It's good for all! How much information is stored here? A lot. We currently have tens of thousands of individual items in our database, including: Moves Abilities Pok\\xE9mon (including various forms) Types Egg Groups Game Versions Items Pok\\xE9dexes Pok\\xE9mon Evolution Chains And that's just scratching the surface! To see all the different types of data we have, check out the docs. The API is missing stuff! We know! Feel free to contribute to open issues on GitHub. Have ideas for new features? We're on Slack! Sign up right here then visit our slack team. So who built this? Pok\\xE9API V1 was created by Paul Hallett as a weekend project but it quickly became more than a weekend's worth of work. In December of 2014 Paul deprecated V1 in favor of working on V2. This is where Zane Adickes jumped in. Zane thought the original project was a fantastic idea and wanted to help it grow. With direction from Paul, Zane created the V2 API using an exact mirror of Veekun's data related to the main series of games. During summer 2018, Paul decided to hand over the project to the community. This is where Tim Malone, Mark Tse, Sargun Vohra, Charles Marttinen, Alessandro Pezz\\xE9, Alberto Oliveira da Silva, and Lucio Merotta came together and started planning how to change the infrastructure in order to improve performance and cut down on hosting costs. An important step was to convert the API to serve static JSON files, which was made possible by Sargun and his excellent PokeAPI/ditto tool. The frontend website was also re-built by Charles at the same time. The whole process was completed in October 2018. After this massive redesign, Pok\\xE9API gained many new consumers due to its new blazing fast performance. To give a quick reference, the loading of the infamous Magikarp pokemon resouce passed from seconds to ~80ms. An important milestone for the Pok\\xE9API project happened shortly after in summer 2020, when its GitHub repository reached 2000 stargazers and in a single month fulfilled 100 million API calls. In August 2020 the Pok\\xE9API community decided to temporarily fork veekun/pokedex, which was the primary and only source of data. This operation was planned in order to add new generation-8 data, which Veekun lacked. The following people contributed to fetching and formatting generation-8 and newer data: Alessandro Pezz\\xE9, Hoang Quoc Trung, Chandler Mahkorn, Andr\\xE9 Sousa, Alexander Whan, Austin Jones, tomi-912, Eric Donders, Ga\\xEBl Dottel, Parnassius and Anh Thang. In January 2023 bitomic, Kohki Miki, Paul-\\xC9mile, tillfox scraped generation 9 data from the web and added it here. The current owners of the Pok\\xE9API project are Paul Hallet, Tim Malone and Alessandro Pezz\\xE9. Alongside them other core maintainers include Charles Marttinen and Sargun Vohra. We also have a GitHub organisation of contributors that you are welcome to join! Where did you get all of this data? We gathered the information on this site from various resources: Veekun has a fantastic Pokedex which is also an open source project containing a ton of csv data. We used this to flesh out the database that powers Pok\\xE9api. Generation 8 data is scraped from different resources which are considered to be trustful. Later on the data was integrated with the official one released by Veekun. We'd also like to thank: Laven Pillay, who scraped together most of the sprites used on the site. Alessandro Pezz\\xE9, who worked tirelessly to add the Sun/Moon updates. What's the technology stack? Up until November 2018, the API and website were built together in a single Python project using the Django framework and paired with a PostgreSQL database to store the data. Django REST Framework was used to expose the data through a RESTful API. The entire stack was deployed at DigitalOcean, initially paid by Paul and then sponsored directly by DigitalOcean itself. In October 2018, the API was converted to serve static JSON files in a fully backwards compatible manner. This allowed Pok\\xE9API to move its hosting to a cheap static hosting solution (Firebase Hosting + Cloudflare Caching), which increased performance and stability by a huge margin. The move to static hosting was solved by introducing a build step before deployment performed by CircleCI, our build system. This build step starts a local Django copy of PokeAPI/pokeapi and saves each possible endpoint as a JSON file using PokeAPI/ditto. All these JSON files are then uploaded to Firebase and served to the public through a Firebase function actioned by CircleCI. This website now uses React Static and the code lives in it's own GitHub project at PokeAPI/pokeapi.co. Again, CircleCI takes care of deploying it on Firebase as static files.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","About","children","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Denmark studies/4th semester/WEB/assignment3/pokedex/src/pages/About.js"],"sourcesContent":["import React from 'react';\r\n\r\nexport const About = () => {\r\n  return (\r\n    <>\r\n      <div className='about-container'>\r\n        <h2>This is a web assignment for IT-WEB2Y-S23</h2>\r\n        <div>\r\n          It was made by these students:\r\n          <ul>\r\n            <li>Vladislav Sarafutdinov - 315224</li>\r\n            <li>Syamend Husin Mamo - 317546</li>\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          This website uses these elements:\r\n          <ul>\r\n            <li>JavaScript</li>\r\n            <li>React</li>\r\n            <li>React-Modal</li>\r\n            <li>React-Routing</li>\r\n            <li>PokeApi</li>\r\n            <li>A drop of love</li>\r\n          </ul>\r\n        </div>\r\n        <div>Here's some text from PokeApi website:</div>\r\n        <span>\r\n        What is this?\r\nThis website provides a RESTful API interface to highly detailed objects built from thousands of lines of data related to Pokémon. We specifically cover the video game franchise. Using this website, you can consume information on Pokémon, their moves, abilities, types, egg groups and much, much more.\r\n\r\nWhat is an API?\r\nAn API (Application Programming Interface) is a contract that allow developers to interact with an application through a set of interfaces. In this case, the application is a database of thousands of Pokémon-related objects, and the interfaces are URL links.\r\n\r\nA RESTful API is an API that conforms to a set of loose conventions based on HTTP verbs, errors, and hyperlinks.\r\n\r\nAren't there 101 other Pokémon websites already?\r\nYes and that's exactly the problem!\r\n\r\n101 instances of the same website means 101 instances of the same data.\r\n\r\nWe aim to provide a single source of data that any number of other websites can consume and use.\r\n\r\nOften, and especially when new Pokémon games or updates are released, those 101+ websites take weeks to update as people have to enter the same information in all those different places.\r\n\r\nThis solves that problem. If all those sites consumed their data from here, they would have the exact same information that is updated at exactly the same time, with no errors between each website. The overall benefit is a better collaboration and consistency across all the different Pokémon websites and applications. It's good for all!\r\n\r\nHow much information is stored here?\r\nA lot.\r\n\r\nWe currently have tens of thousands of individual items in our database, including:\r\n\r\nMoves\r\nAbilities\r\nPokémon (including various forms)\r\nTypes\r\nEgg Groups\r\nGame Versions\r\nItems\r\nPokédexes\r\nPokémon Evolution Chains\r\nAnd that's just scratching the surface! To see all the different types of data we have, check out the docs.\r\n\r\nThe API is missing stuff!\r\nWe know! Feel free to contribute to open issues on GitHub.\r\n\r\nHave ideas for new features? We're on Slack! Sign up right here then visit our slack team.\r\n\r\nSo who built this?\r\nPokéAPI V1 was created by Paul Hallett as a weekend project but it quickly became more than a weekend's worth of work. In December of 2014 Paul deprecated V1 in favor of working on V2.\r\n\r\nThis is where Zane Adickes jumped in. Zane thought the original project was a fantastic idea and wanted to help it grow. With direction from Paul, Zane created the V2 API using an exact mirror of Veekun's data related to the main series of games.\r\n\r\nDuring summer 2018, Paul decided to hand over the project to the community. This is where Tim Malone, Mark Tse, Sargun Vohra, Charles Marttinen, Alessandro Pezzé, Alberto Oliveira da Silva, and Lucio Merotta came together and started planning how to change the infrastructure in order to improve performance and cut down on hosting costs. An important step was to convert the API to serve static JSON files, which was made possible by Sargun and his excellent PokeAPI/ditto tool. The frontend website was also re-built by Charles at the same time. The whole process was completed in October 2018.\r\n\r\nAfter this massive redesign, PokéAPI gained many new consumers due to its new blazing fast performance. To give a quick reference, the loading of the infamous Magikarp pokemon resouce passed from seconds to ~80ms. An important milestone for the PokéAPI project happened shortly after in summer 2020, when its GitHub repository reached 2000 stargazers and in a single month fulfilled 100 million API calls.\r\n\r\nIn August 2020 the PokéAPI community decided to temporarily fork veekun/pokedex, which was the primary and only source of data. This operation was planned in order to add new generation-8 data, which Veekun lacked. The following people contributed to fetching and formatting generation-8 and newer data: Alessandro Pezzé, Hoang Quoc Trung, Chandler Mahkorn, André Sousa, Alexander Whan, Austin Jones, tomi-912, Eric Donders, Gaël Dottel, Parnassius and Anh Thang.\r\n\r\nIn January 2023 bitomic, Kohki Miki, Paul-Émile, tillfox scraped generation 9 data from the web and added it here.\r\n\r\nThe current owners of the PokéAPI project are Paul Hallet, Tim Malone and Alessandro Pezzé. Alongside them other core maintainers include Charles Marttinen and Sargun Vohra.\r\n\r\nWe also have a GitHub organisation of contributors that you are welcome to join!\r\n\r\nWhere did you get all of this data?\r\nWe gathered the information on this site from various resources:\r\n\r\nVeekun has a fantastic Pokedex which is also an open source project containing a ton of csv data. We used this to flesh out the database that powers Pokéapi.\r\nGeneration 8 data is scraped from different resources which are considered to be trustful. Later on the data was integrated with the official one released by Veekun.\r\nWe'd also like to thank:\r\n\r\nLaven Pillay, who scraped together most of the sprites used on the site.\r\nAlessandro Pezzé, who worked tirelessly to add the Sun/Moon updates.\r\nWhat's the technology stack?\r\nUp until November 2018, the API and website were built together in a single Python project using the Django framework and paired with a PostgreSQL database to store the data. Django REST Framework was used to expose the data through a RESTful API. The entire stack was deployed at DigitalOcean, initially paid by Paul and then sponsored directly by DigitalOcean itself.\r\n\r\nIn October 2018, the API was converted to serve static JSON files in a fully backwards compatible manner. This allowed PokéAPI to move its hosting to a cheap static hosting solution (Firebase Hosting + Cloudflare Caching), which increased performance and stability by a huge margin.\r\n\r\nThe move to static hosting was solved by introducing a build step before deployment performed by CircleCI, our build system. This build step starts a local Django copy of PokeAPI/pokeapi and saves each possible endpoint as a JSON file using PokeAPI/ditto. All these JSON files are then uploaded to Firebase and served to the public through a Firebase function actioned by CircleCI.\r\n\r\nThis website now uses React Static and the code lives in it's own GitHub project at PokeAPI/pokeapi.co. Again, CircleCI takes care of deploying it on Firebase as static files.\r\n        </span>\r\n      </div>\r\n    </>\r\n  )\r\n};"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1B,OAAO,MAAMC,KAAK,GAAGA,CAAA,KAAM;EACzB,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA;MAAKK,SAAS,EAAC,iBAAiB;MAAAD,QAAA,gBAC9BJ,OAAA;QAAAI,QAAA,EAAI;MAAyC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAK,eAClDT,OAAA;QAAAI,QAAA,GAAK,gCAEH,eAAAJ,OAAA;UAAAI,QAAA,gBACEJ,OAAA;YAAAI,QAAA,EAAI;UAA+B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eACxCT,OAAA;YAAAI,QAAA,EAAI;UAA2B;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACjC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACD,eACNT,OAAA;QAAAI,QAAA,GAAK,mCAEH,eAAAJ,OAAA;UAAAI,QAAA,gBACEJ,OAAA;YAAAI,QAAA,EAAI;UAAU;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eACnBT,OAAA;YAAAI,QAAA,EAAI;UAAK;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eACdT,OAAA;YAAAI,QAAA,EAAI;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eACpBT,OAAA;YAAAI,QAAA,EAAI;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eACtBT,OAAA;YAAAI,QAAA,EAAI;UAAO;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK,eAChBT,OAAA;YAAAI,QAAA,EAAI;UAAc;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAAK;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACpB;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACD,eACNT,OAAA;QAAAI,QAAA,EAAK;MAAsC;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACjDT,OAAA;QAAAI,QAAA,EAAM;MA2EN;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACH,iBACL;AAEP,CAAC;AAACC,EAAA,GAvGWP,KAAK;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}